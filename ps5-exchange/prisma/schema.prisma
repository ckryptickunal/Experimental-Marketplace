generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  image         String?
  passwordHash  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  purchases     Order[]       @relation("Purchases")
  sales         Order[]       @relation("Sales")
  messagesSent  Message[]     @relation("MessagesSent")
  messagesRecv  Message[]     @relation("MessagesRecv")
  role          String        @default("USER")
  verified      Boolean       @default(false)
  rating        Float?
}

model Listing {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String
  priceCents  Int
  condition   String
  imageUrl    String?
  sellerId    String
  seller      User       @relation(fields: [sellerId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  orders      Order[]
}

model Order {
  id          String   @id @default(cuid())
  buyerId     String
  buyer       User     @relation("Purchases", fields: [buyerId], references: [id])
  sellerId    String
  seller      User     @relation("Sales", fields: [sellerId], references: [id])
  listingId   String
  listing     Listing  @relation(fields: [listingId], references: [id])
  status      String   @default("PENDING")
  totalCents  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stripeIntentId String?
}

model Message {
  id        String   @id @default(cuid())
  senderId  String
  receiverId String
  sender    User     @relation("MessagesSent", fields: [senderId], references: [id])
  receiver  User     @relation("MessagesRecv", fields: [receiverId], references: [id])
  body      String
  createdAt DateTime @default(now())
  readAt    DateTime?
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// enums replaced with strings for SQLite compatibility

